<!DOCTYPE html>
<meta charset="utf-8">
<style>

circle {
  stroke-width: 1.5px;
}


line {
  stroke: #555;
}

</style>
<body>
<script src="//d3js.org/d3.v3.min.js"></script>
<script>

var width = 1020,
    height = 800,
    nodeOpacity = 0.5,
    nodeFontSize = 9,
    radius = 8;

var fill = d3.scale.category20();

var force = d3.layout.force()
    .gravity(.06)
    .charge(-80)
    .linkDistance(20)
    .size([width, height]);

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);

d3.json("rs-data/jsonData.json", function(error, graph) {
  if (error) throw error;

  //allow string source and target in links
  //note that 'edges' must be used not 'graph.links'
  var edges = [];
  graph.links.forEach(function(e) { 
    var sourceNode = graph.nodes.filter(function(n) { return n.id === e.source; })[0],
    targetNode = graph.nodes.filter(function(n) { return n.id === e.target; })[0];
    edges.push({source: sourceNode, target: targetNode, value: e.id});
   });

  // build the arrow.
  svg.append("svg:defs").selectAll("marker")
      .data(["end"])      // Different link/path types can be defined here
    .enter().append("svg:marker")    // This section adds in the arrows
      .attr("id", String)
      .attr("viewBox", "0 -5 10 10")
      .attr("refX", 15)
      .attr("refY", -1.5)
      .attr("markerWidth", 8)
      .attr("markerHeight", 8)
      .attr("orient", "auto")
    .append("svg:path")
      .attr("d", "M0,-5L10,0L0,5");

  var link = svg.selectAll("line")
      .data(edges)
      .enter().append("line")
      .attr("id", function(d) { return d.value;})
      .attr("opacity", nodeOpacity)
      .attr("marker-end", "url(#end)");

  var node = svg.selectAll(".node")
      .data(graph.nodes)
      .enter().append("g")
      .attr("id", function(d) { return d.id;})
      .attr("opacity", nodeOpacity)
      .attr("font-size", nodeFontSize + 'px')
      .attr("class", "node");

  node.append("text")
      .attr("dx", 12)
      .attr("dy", ".35em")
      .text(function(d) { return d.id});

  node.append("circle")
      .attr("class", "node")
      .attr("r", radius - 0.75)
      .on("mouseenter", selectNode)
      .on("mouseleave", unselectNode)
      .style("fill", function(d) { return fill(d.group); })
      .style("stroke", function(d) { return d3.rgb(fill(d.group)).darker(); })
      .call(force.drag);
     


  force
      .links(edges)
      .nodes(graph.nodes)
      .on("tick", tick)
      .start();

  function tick() {
    //no need to constantly redraw 
    if (force.alpha() <0.01) { force.stop(); };

    node.attr("cx", function(d) { return d.x = Math.max(radius, Math.min(width - radius, d.x)); })
        .attr("cy", function(d) { return d.y = Math.max(radius, Math.min(height - radius, d.y)); });

    link.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

    node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
  }

  //mouse events
  function selectNode() {
    let node = d3.select(this.parentNode);

    node.style("opacity", "1");
      
    node.select("text").transition()
      .duration(500)
      .style("font-size", (nodeFontSize * 2) + 'px');
    
    let id = this.parentNode.id;

    let links = edges.filter(function(edge) {
      return edge.source.id === id || edge.target.id === id; 
    })

    console.log(links);



    /*
    for(let i = 0; i < edges.length; i++) {
      if(edges[i].source.id === id || edges[i].target.id === id) {
        let edge = d3.select('#' + edges[i].value);
        console.log(edge);
        edge.style("opacity", "1");
      }
    }
   */
  }

  function unselectNode() {
    let node = d3.select(this.parentNode);

    node.style("opacity", nodeOpacity);
      
    node.select("text").transition()
      .duration(500)
      .style("font-size", nodeFontSize + 'px');
  }

});

</script>

