<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Maciej Kus is not a Figure Skater]]></title>
  <link href="http://maciejkus.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://maciejkus.com/"/>
  <updated>2015-03-28T13:59:39-07:00</updated>
  <id>http://maciejkus.com/</id>
  <author>
    <name><![CDATA[Maciej Kus]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Accurate Rounding In Python]]></title>
    <link href="http://maciejkus.com/blog/2015/03/13/accurate-rounding-in-python/"/>
    <updated>2015-03-13T14:25:15-07:00</updated>
    <id>http://maciejkus.com/blog/2015/03/13/accurate-rounding-in-python</id>
    <content type="html"><![CDATA[<p>Rounding floats doesn&rsquo;t work all that well. I was using python to write some code which outputs math problems related to rounding. I needed the problems to use random numbers, so I just used
<code>
num= random.uniform(.5,10.9)
</code>
which returns a random floating point number. Easy enough. Later on I needed to round this to an integer, however, rounding floating numbers doesn&rsquo;t always work as expected. This is pretty well documented all over the Internet, yet a simple solution took me a bit more time than it should have. At one point I just thought about turning the number into a string, parsing out the digit after the decimal point and if it was greater than 4 rounding up and if not, rounding down. That would have worked.</p>

<p>But I was stubborn and figured there must be a more mathy way of doing things. The solution was:
<code>
round1 = Decimal(format( num1, '.2f'))
round1 = Decimal(round1.quantize(Decimal('1')))
</code>
Turn the number into a decimal, and then round. All arithmetic functions such as &ldquo;+&rdquo; still work fine without having to convert back to float or anything like that.</p>
]]></content>
  </entry>
  
</feed>
