<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vps | Maciej Kus is not a Figure Skater]]></title>
  <link href="http://maciejkus.com/blog/categories/vps/atom.xml" rel="self"/>
  <link href="http://maciejkus.com/"/>
  <updated>2015-10-11T15:57:19-07:00</updated>
  <id>http://maciejkus.com/</id>
  <author>
    <name><![CDATA[Maciej Kus]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[128 VPS]]></title>
    <link href="http://maciejkus.com/blog/2015/02/21/128-vps/"/>
    <updated>2015-02-21T14:40:30-08:00</updated>
    <id>http://maciejkus.com/blog/2015/02/21/128-vps</id>
    <content type="html"><![CDATA[<p>
I have my first VPS. It's a tiny 128mb RAM VPS which costs me a whooping $15 a year. Not too bad. I will be hosting a few static websties on it. These are CSS/HTML/JavaScript only sites. No database, no php, no backend. So unless traffic levels get crazy, a 128mb VPS should be fine. I setup a minimal 32-bit version of Debian on it and was ready to go.
</p>


<!-- more -->


<p>
The first thing I did was disable root ssh login and create a new user. I also went ahead and changed the default SSH port and installed fail2ban to avoid SSH attacks. I also setup [automatic](http://www.the-art-of-web.com/system/cron-apt-wheezy/) security updates using a cronjob. I figure this is enough security that the server will need. fail2ban takes about 3-4 mb of RAM, so I still have plenty left for webhosting.
</p>


<p>
I then installed nginx and set it up to accommodate my little server. Since I only have one CPU, I set 'worker_processes' to 1, 'worker_connections' to 1024, and lowered the timout to 25 seconds. I also setup client caching of all CSS, JS, and image files. Finally I also turned 'gzip_static' on, which allows pre-zipped files to be sent out by the server. This means if a file is gzipped before hand the server does not use CPU to gzip that file. I gzipped all my .html and .js files and kept both the original and the new .gz files in the  same directory. 
</p>


<p>If a .gz file does not exist, nginx will gzip the original file (.html for example) using up CPU resources to do so. However, if nginx sees both index.html and index.html.gz it will server up index.html.gz instead. The one gotcha is that every time you make a change to the .html file you will need to update the .html.gz file also. Apparently nginx also likes the original and the gzipped files to have the same time stamp, so once all the files were ready to go I has to 'touch *' to give them all the same time stamp.
</p>


<p>The site that I have running on the VPS gets over 1,000 page views a day and the load and memory usage on the server is tiny. I can easily add other static sites to the server, or increase the amount of traffic to the server without and problems. Now I have a fun little virtual server to play with.
</p>

]]></content>
  </entry>
  
</feed>
