<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript, | Maciej Kus -- Bay Area JavaScript Developer]]></title>
  <link href="http://maciejkus.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://maciejkus.com/"/>
  <updated>2016-09-10T18:33:54-07:00</updated>
  <id>http://maciejkus.com/</id>
  <author>
    <name><![CDATA[Maciej Kus]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Robby-the-robot-codewars]]></title>
    <link href="http://maciejkus.com/blog/2016/07/23/robby-the-robot-codewars/"/>
    <updated>2016-07-23T12:12:24-07:00</updated>
    <id>http://maciejkus.com/blog/2016/07/23/robby-the-robot-codewars</id>
    <content type="html"><![CDATA[<p>I just solved a 2kyu challenge from codewars called Robby the robot. The algorithm used to solve the challenge was more time consuming than the actual coding, so here I will describe what I did. Others can use this to code their own solution.</p>

<p>I will not be posting any code on here. Codewars is supposed to be a challenge, and posting code here will allow others to cheat. I would be doing them a disservice. Oh, and I did not re-factor or clean up my code before submitting it, so it wouldn&rsquo;t set the best example.</p>

<!--more-->


<p>I didn&rsquo;t clean up the code because I know I will never touch it again. The Robby the robot codewars kata was so specific, it will never be useful to reuse this code.</p>

<p>Anyway, the challenge is this: Find the shortest path from one part of a maze to another, when turns count as a move.</p>

<p>Lets say the maze looks like this:</p>

<p>S&hellip;
&hellip;.
&hellip;T</p>

<p>&ldquo;S&rdquo; is the start and &ldquo;T&rdquo; is the finish. Dots are valid moves, and hashes are walls that cannot be stepped into. Finally, the starting direction is always facing north.</p>

<p>So my first step was to find the shortest path between the start and end points. I did this using a breadth first traversal. So, every space next to the start point gets a score of 1, every space adjacent to those spaces which we have not already marked gets a 2, and so on. This is only done for spaces which are valid to move into. Walls do not get a number. The result was this:</p>

<p>S123
1234
234T</p>

<p>Now that every possible space has a number, the shortest path would be found by starting at the end (T) and moving backwards along the lowest numbers. So the lowest number next to the &ldquo;T&rdquo; is a 4. From there move to a 3, then a 2 then a 1. As you can see, the above has more than one shortest path. For other mazes, there might be a single shortest path.</p>

<p>However, the problem states that a turn in direction counts as a move. And we always start facing north. To account for turns, I keep track of two numbers, the above number of moves, and also a second number which keeps track of the amount of turns used to reach the current space.</p>

<p>The amount of turns used to reach the end for each space would look like this:</p>

<p>S111
2222
333T</p>

<p>Now we are getting somewhere. To reach T from any of the southernmost row would require at least 3 turns, while reaching T from the eastern most row would require only 2 turns.</p>

<p>Finally, I add the numbers of turns and the number of moves needed to reach T together and get:</p>

<p>S123
1234
234T</p>

<p>+</p>

<p>S111
2222
333T</p>

<p>S234
3456
567T</p>

<p>From here we can trace the shortest path with the least amount of turns back from T to S. Just move from T to the lowest number, and keep moving to the lowest adjacent number. The route would be 6-4-3-2-S.</p>

<p>This solution worked for all mazes tested.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[playing with react]]></title>
    <link href="http://maciejkus.com/blog/2016/04/09/playing-with-react/"/>
    <updated>2016-04-09T13:09:53-07:00</updated>
    <id>http://maciejkus.com/blog/2016/04/09/playing-with-react</id>
    <content type="html"><![CDATA[<p>Well, I have begun playing with React.js. For my first app I created a <a href='http://maciejkus.com/communist-lorem-ipsum/
'>lorem ipsum style generator</a>. Source is <a href='https://github.com/MaciejKus/Communist-Lorem-Ipsum'>here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[canvas-game]]></title>
    <link href="http://maciejkus.com/blog/2016/03/14/canvas-game/"/>
    <updated>2016-03-14T10:03:59-07:00</updated>
    <id>http://maciejkus.com/blog/2016/03/14/canvas-game</id>
    <content type="html"><![CDATA[<p>I wanted to try out Jasmine, which is a JavaScript unit testing library. I also had an idea for what could be a fun little <a href='http://maciejkus.com/canvas-game/'>game</a>, so I went ahead and made a html5/canvas game and used Jasmine to test things as I coded.</p>

<!-- more -->


<p>Though there are some plug-ins out there to make Jasmine work with canvas rendering, I skipped those, so I didn&rsquo;t truly test everything. But I did test all the non-drawing aspects of the game.</p>

<p>The game is simple enough that I don&rsquo;t think the unit testing helped too much, but if I were to expand the game it is useful to have the existing tests in place.</p>

<p>The tricky thing about this game was all the math. Do you remember those smart aleck kids in math class who would ask the teacher when they would ever use the math that they were learning? Well, at times I felt like my work on this game justified as an answer for all those teachers. This might have been the first time I ever had to find the intersection of two line segments outside of a school setting.</p>

<p>The game is all vanilla JavaScript using the HTML5 canvas object. Play it <a href='http://maciejkus.com/canvas-game/'>here</a>. The source code is on <a href='https://github.com/MaciejKus/canvas-fly-game'>github</a>. I am now familiar enough with Jasmine that I can and will use unit testing for future projects. Wins all around.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roman numbers]]></title>
    <link href="http://maciejkus.com/blog/2016/02/12/roman-numbers/"/>
    <updated>2016-02-12T16:07:50-08:00</updated>
    <id>http://maciejkus.com/blog/2016/02/12/roman-numbers</id>
    <content type="html"><![CDATA[<p>A quick <a href='http://maciejkus.com/roman-numeral-calculator/'>Roman numeral converter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[using-d3-to-visualize-data]]></title>
    <link href="http://maciejkus.com/blog/2016/01/19/using-d3-to-visualize-data/"/>
    <updated>2016-01-19T14:10:57-08:00</updated>
    <id>http://maciejkus.com/blog/2016/01/19/using-d3-to-visualize-data</id>
    <content type="html"><![CDATA[<p>I started playing with d3.js, a visualization library. I got some data from the kickfurther website using a little python script I wrote. The script parsed out the relevant data and saved it as a JavaScript object.</p>

<p>From there I used <a href='http://chimera.labs.oreilly.com/books/1230000000345'>Interactive Data Visualization for the Web</a> as an intro to d3.js and built a fun little bubble graph. I don&rsquo;t know if a bubble graph is the most informative way to present this data, but it was the coolest looking, and mainly I was attempting to learn d3.js.</p>

<p>Check out my <a href='http://maciejkus.com/kickfurther-data/'>Kickfurther visualization</a>.</p>
]]></content>
  </entry>
  
</feed>
