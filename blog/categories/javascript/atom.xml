<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript, | Maciej Kus is not a Figure Skater]]></title>
  <link href="http://maciejkus.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://maciejkus.com/"/>
  <updated>2015-08-04T09:26:52-07:00</updated>
  <id>http://maciejkus.com/</id>
  <author>
    <name><![CDATA[Maciej Kus]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Canvas Breakout]]></title>
    <link href="http://maciejkus.com/blog/2015/08/04/canvas-breakout/"/>
    <updated>2015-08-04T09:24:11-07:00</updated>
    <id>http://maciejkus.com/blog/2015/08/04/canvas-breakout</id>
    <content type="html"><![CDATA[<p>Continuing with the Canvas/JavaScript game theme that I&rsquo;ve been on recently, I just coded a game of <a href="/breakout/">Breakout</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Canvas/HTML5 Tower Defense]]></title>
    <link href="http://maciejkus.com/blog/2015/07/06/canvas-tower-defense/"/>
    <updated>2015-07-06T17:30:41-07:00</updated>
    <id>http://maciejkus.com/blog/2015/07/06/canvas-tower-defense</id>
    <content type="html"><![CDATA[<p>I made a fairly simply tower defense game in html5/canvas/javascript. It works fine as is. Most of the features I would want to create are there, the game just needs some work on the actual game play. Details like the cost of towers, and how rapid the attackers are spawned will probably need to be changed to make the game more enjoyable. The current version works well enough to play.</p>

<p>Check it out at <a href="http://maciejkus.com/tower/">http://maciejkus.com/tower/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[box_whiskers_calc]]></title>
    <link href="http://maciejkus.com/blog/2015/06/20/box-whiskers-calc/"/>
    <updated>2015-06-20T12:30:32-07:00</updated>
    <id>http://maciejkus.com/blog/2015/06/20/box-whiskers-calc</id>
    <content type="html"><![CDATA[<p> There is a shocking lack of box and whisker graph calculators on the Internet. Well, accurate ones anyway, so I made one. Originally I needed one for some calculations I was doing and made one in Python, but then I figured I can easily rewrite it into Javascript and make it available for others. I even added a simple HTML5 canvas graph. You can find it at <a href="http://maciejkus.com/box_whiskers/">Box and Whiskers Calculator</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[angular-baseball-game]]></title>
    <link href="http://maciejkus.com/blog/2015/06/05/angular-baseball-game/"/>
    <updated>2015-06-05T12:40:07-07:00</updated>
    <id>http://maciejkus.com/blog/2015/06/05/angular-baseball-game</id>
    <content type="html"><![CDATA[<p>Inspired by a Codewars kata I created a simple <a href="http://maciejkus.com/baseball-game/">baseball game</a>. It was the first time I used AngularJS, but I feel like the Angular was unnecessary. I will need to build a few other pages to get the full idea of Angular.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Removing Event Listeners When Redrawing Canvas]]></title>
    <link href="http://maciejkus.com/blog/2014/09/28/removing-event-listeners-when-redrawing-canvas/"/>
    <updated>2014-09-28T15:43:08-07:00</updated>
    <id>http://maciejkus.com/blog/2014/09/28/removing-event-listeners-when-redrawing-canvas</id>
    <content type="html"><![CDATA[<p>I was drawing a network graph using canvas, it had nodes and edges and when a user clicks on a node the canvas is redrawn. All of this is fine, but then I also wanted to have a navigation bar outside of the canvas which would redraw the canvas when that was clicked. Now redrawing the canvas is easy, but the redraw did not remove the event listeners from the previously drawn canvas. For example, say a node moves to the middle of the graph if it is clicked on. Even if the canvas is redrawn with that node gone, the event listener stayed around and when the user clicked on the section of the canvas where the node used to be, the event would still trigger and the node would be drawn in the middle of the graph. </p>


<!--more-->


<p>The problem came about because the navigation bar was outside of the scope of the canvas function. Even if I turned 'canvas' into a global variable, 'canvas.removeEventListener' did not work because the event handler was not a global variable. I could eventually moved enough of the variables into the global scope that maybe things would have worked. 'removeEventListener' worked fine when I used it inside the canvas function. But luckily the page was already using jQuery, so after playing around and giving up on 'removeEventListener', I moved on to use the jQuery 'on()' and 'off()' event handler functions. </p>


<p>The reason these worked so well is that using 'off()' without any arguments removes all event handlers which were added using the 'on()' function. You cannot mix 'addEventListener' and 'off()' together. But anything attached with a 'on()' was fair game. So all I needed to add to the sidebar was '$(canvas).off();' and any event listener attached to the canvas element was removed.</p>

]]></content>
  </entry>
  
</feed>
