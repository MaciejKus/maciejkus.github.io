<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Maciej Kus -- Bay Area JavaScript Developer]]></title>
  <link href="http://maciejkus.com/atom.xml" rel="self"/>
  <link href="http://maciejkus.com/"/>
  <updated>2017-07-01T16:37:08-07:00</updated>
  <id>http://maciejkus.com/</id>
  <author>
    <name><![CDATA[Maciej Kus]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[3d map]]></title>
    <link href="http://maciejkus.com/blog/2017/03/11/3d-map/"/>
    <updated>2017-03-11T18:19:54-08:00</updated>
    <id>http://maciejkus.com/blog/2017/03/11/3d-map</id>
    <content type="html"><![CDATA[<p>I made an interactive <a href="http://he.net/3d-map/">3D network map</a> for Hurricane Electric. It includes the network locations and circuits along with third party data centers and submarine cables around the world.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bike and Bart]]></title>
    <link href="http://maciejkus.com/blog/2017/03/03/bike-and-bart/"/>
    <updated>2017-03-03T16:16:13-08:00</updated>
    <id>http://maciejkus.com/blog/2017/03/03/bike-and-bart</id>
    <content type="html"><![CDATA[<p>Bay Area cyclists probably know that Google Maps is great for getting riding directions. And BART has a good website for finding out when the next train is coming. But it always takes a few steps to plan a full bicycle and BART trip.</p>

<p>Now this can be done on a single page. I present to you <a href="http://maciejkus.com/bike-bart/">http://maciejkus.com/bike-bart/</a></p>

<p>Google Maps and BART API combined.</p>

<p>source:
<a href="https://github.com/MaciejKus/whichBart">https://github.com/MaciejKus/whichBart</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[d3 world map]]></title>
    <link href="http://maciejkus.com/blog/2016/12/06/d3-world-map/"/>
    <updated>2016-12-06T13:52:29-08:00</updated>
    <id>http://maciejkus.com/blog/2016/12/06/d3-world-map</id>
    <content type="html"><![CDATA[<p>A D3 <a href="http://bl.ocks.org/MaciejKus/61e9ff1591355b00c1c1caf31e76a668">world map</a> where if you zoom in the states in the USA and Canada are shown, but if you zoom out, only the countries are shown. Also has rotation when scale is set to 1, tooltips and the ability to highlight a country or state.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[full stack punk app]]></title>
    <link href="http://maciejkus.com/blog/2016/09/16/full-stack-punk-app/"/>
    <updated>2016-09-16T17:46:13-07:00</updated>
    <id>http://maciejkus.com/blog/2016/09/16/full-stack-punk-app</id>
    <content type="html"><![CDATA[<p>The San Francisco Bay Area is lucky enough to have someone named Steve who compiled a list of concerts in a simple text format for the last 20+ years. This served as a way for people to know where to find punk rock shows. You can see it <a href="http://jon.luini.com/thelist/thelist.txt">here</a>.</p>

<p>Because the format of the concert listings has largely been the same over the years I was about to use NodeJS to scrape this data. I wrote a script which looked at the archive of concerts, and extracted the band names, the dates, and the venue names.</p>

<p>The script then searches for duplicates. This was a bit challenging as some listings were the same show but with a minor spelling error one week. By looking at band names, concert dates and venue names I was able to remove most duplicates.</p>

<p>After removing duplicates and cleaning out a few other things I had a list of concerts with the dates, bands and venues. I saved this into JSON format and CSV format.</p>

<p>I then used the CSV format to create a network <a href="http://bayareapunk.com/graphs/">graph</a> of each yeah from 1994 to 2015 (I am waiting for 2016 to be over before adding 2016). These graphs show a social network of bands connected to one another with shows that they played. In other words, the graphs are a network of bands who are connected if they shared a stage in that particular year.</p>

<p>After these (pretty massive) graphs were finished I used the Gephi SigmaJS exporter to create JavaScript versions of each graph.</p>

<p>Finally, I added the JSON data to a Mongo database and created a front-end for the site using Ractjs. The routing for the site is fairly simple, so I avoided using React Router. There was no need for it in this case. The final site can be found at <a href="http://bayareapunk.com">bayareapunk.com</a>.</p>

<p>Now I can write NodeJS scripts to query this database. For example, I can see which bands played the most shows since 1994.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[d3 vocalist graph]]></title>
    <link href="http://maciejkus.com/blog/2016/08/21/d3-vocalist-graph/"/>
    <updated>2016-08-21T15:54:27-07:00</updated>
    <id>http://maciejkus.com/blog/2016/08/21/d3-vocalist-graph</id>
    <content type="html"><![CDATA[<p>A D3.js graph of Rolling Stone magazine&rsquo;s 100 greatest singers. The data was scraped from a downloaded version of the html file form Rolling Stone magazine. The node.js file used to scrape the data is rs-data/scrape.js.</p>

<p>D3.js was then used to build a force graph of the data showing which artist influenced which other artist.</p>

<p>Find it at: <a href="http://maciejkus.com/100-greatest-vocalists-graph/">http://maciejkus.com/100-greatest-vocalists-graph/</a></p>

<p>Source: <a href="https://github.com/MaciejKus/100-greatest-vocalists-graph">https://github.com/MaciejKus/100-greatest-vocalists-graph</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CRUD-job-app]]></title>
    <link href="http://maciejkus.com/blog/2016/08/20/crud-job-app/"/>
    <updated>2016-08-20T11:07:52-07:00</updated>
    <id>http://maciejkus.com/blog/2016/08/20/crud-job-app</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been making a full-stack CRUD application. It&rsquo;s meant to keep track of jobs that one has applied to. The backend is Nodejs and Mongodb. I built two different front ends, one with React and the other with Angular. There was no need to build two frontends, but I wanted the practice of building the same project using two different frameworks.</p>

<p>The code is at <a href="https://github.com/MaciejKus/job-search-app">https://github.com/MaciejKus/job-search-app</a>. The app allows the user to input job information, such as the company name and the title. This is saved in the database so that the user can keep track of jobs he or she applied to.</p>

<p>Every job can be edited to update if the user got a reply from the company or any other notes that the user may wish to make. Jobs can also be deleted and added.</p>

<p>I used routing in both the frontends. I didn&rsquo;t necessarily need to, but this app is meant to be a learning/practice experience rather than something I expect others to use.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[react-bootstrap-smoothie-calculator]]></title>
    <link href="http://maciejkus.com/blog/2016/07/24/react-bootstrap-smoothie-calculator/"/>
    <updated>2016-07-24T13:48:23-07:00</updated>
    <id>http://maciejkus.com/blog/2016/07/24/react-bootstrap-smoothie-calculator</id>
    <content type="html"><![CDATA[<p>Using React and Bootstrap I made a <a href="http://smoothiegains.com/smoothie-calculator/">smoothie nutrition calculator</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Robby-the-robot-codewars]]></title>
    <link href="http://maciejkus.com/blog/2016/07/23/robby-the-robot-codewars/"/>
    <updated>2016-07-23T12:12:24-07:00</updated>
    <id>http://maciejkus.com/blog/2016/07/23/robby-the-robot-codewars</id>
    <content type="html"><![CDATA[<p>I just solved a 2kyu challenge from codewars called Robby the robot. The algorithm used to solve the challenge was more time consuming than the actual coding, so here I will describe what I did. Others can use this to code their own solution.</p>

<p>I will not be posting any code on here. Codewars is supposed to be a challenge, and posting code here will allow others to cheat. I would be doing them a disservice. Oh, and I did not re-factor or clean up my code before submitting it, so it wouldn&rsquo;t set the best example.</p>

<!--more-->


<p>I didn&rsquo;t clean up the code because I know I will never touch it again. The Robby the robot codewars kata was so specific, it will never be useful to reuse this code.</p>

<p>Anyway, the challenge is this: Find the shortest path from one part of a maze to another, when turns count as a move.</p>

<p>Lets say the maze looks like this:</p>

<p>S&hellip;
&hellip;.
&hellip;T</p>

<p>&ldquo;S&rdquo; is the start and &ldquo;T&rdquo; is the finish. Dots are valid moves, and hashes are walls that cannot be stepped into. Finally, the starting direction is always facing north.</p>

<p>So my first step was to find the shortest path between the start and end points. I did this using a breadth first traversal. So, every space next to the start point gets a score of 1, every space adjacent to those spaces which we have not already marked gets a 2, and so on. This is only done for spaces which are valid to move into. Walls do not get a number. The result was this:</p>

<p>S123
1234
234T</p>

<p>Now that every possible space has a number, the shortest path would be found by starting at the end (T) and moving backwards along the lowest numbers. So the lowest number next to the &ldquo;T&rdquo; is a 4. From there move to a 3, then a 2 then a 1. As you can see, the above has more than one shortest path. For other mazes, there might be a single shortest path.</p>

<p>However, the problem states that a turn in direction counts as a move. And we always start facing north. To account for turns, I keep track of two numbers, the above number of moves, and also a second number which keeps track of the amount of turns used to reach the current space.</p>

<p>The amount of turns used to reach the end for each space would look like this:</p>

<p>S111
2222
333T</p>

<p>Now we are getting somewhere. To reach T from any of the southernmost row would require at least 3 turns, while reaching T from the eastern most row would require only 2 turns.</p>

<p>Finally, I add the numbers of turns and the number of moves needed to reach T together and get:</p>

<p>S123
1234
234T</p>

<p>+</p>

<p>S111
2222
333T</p>

<p>S234
3456
567T</p>

<p>From here we can trace the shortest path with the least amount of turns back from T to S. Just move from T to the lowest number, and keep moving to the lowest adjacent number. The route would be 6-4-3-2-S.</p>

<p>This solution worked for all mazes tested.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finally made a todo app]]></title>
    <link href="http://maciejkus.com/blog/2016/07/09/finally-made-a-todo-app/"/>
    <updated>2016-07-09T15:40:38-07:00</updated>
    <id>http://maciejkus.com/blog/2016/07/09/finally-made-a-todo-app</id>
    <content type="html"><![CDATA[<p>There&rsquo;s a lot of todo apps out there, but I finally got around to making one myself. I used Node.js, MongoDB, Express.js for most of it and then just added a very simple HTML front end. I have plans to one day add a nicer front end, most likely using Angular2, which I have recently been playing with.</p>

<p>Until I polish the frontend up a bit I think I will keep the app to myself, but I do like to post notes on what I have been up to here and there.</p>

<p>On the Angular2 side of things, I did learn a valuable lesson. When learning a new framework that recommends a language that you are not familiar with, learn that language first. Most of the confusion I encountered when I first looked at Angural2 was simply due to TypeScript syntax that I was not familiar with. Once I got that figured out it wasn&rsquo;t bad at all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[new static site]]></title>
    <link href="http://maciejkus.com/blog/2016/07/09/new-static-site/"/>
    <updated>2016-07-09T15:36:57-07:00</updated>
    <id>http://maciejkus.com/blog/2016/07/09/new-static-site</id>
    <content type="html"><![CDATA[<p>I designed and created a new static website. It&rsquo;s a <a href="http://comfortersetguide.com/">comforter buying guide</a> website. I used MetalSmith to create the site and blog, handlebars for the HTML templates and customer CSS for the styles.</p>

<!--more-->


<p>It&rsquo;s nothing too fancy, but it&rsquo;s nice to see more of my work out on the Internet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[metalsmith-skeleton]]></title>
    <link href="http://maciejkus.com/blog/2016/07/05/metalsmith-skeleton/"/>
    <updated>2016-07-05T14:59:36-07:00</updated>
    <id>http://maciejkus.com/blog/2016/07/05/metalsmith-skeleton</id>
    <content type="html"><![CDATA[<p>When I was first making a blog/site I wanted a static site, so I could host it on github pages without needing a backend. Octobers seemed like the best choice at the time because it was quick and easy to setup. Octopress is based on Jekyll, which is probably the most popular static website generator. It also had a number of pre-made templates which meant saving time on writing my own CSS.</p>

<p>Basically, it was a quick and relatively easy way of getting a blog on maciejkus.com going. I now have plans to move the blog over to <a href="http://www.metalsmith.io/">metalsmith</a>. Metalsmith is written in JavaScript, and that alone is reason enough for me to switch over. I&rsquo;m much more comfortable in a JavaScript/Nodejs environment than a Ruby one. I also find metalsmith to be a lot more customizable, and at this point I am much more interested in writing my own CSS rather than using a premade template.</p>

<!-- more -->


<p>The move should not be very difficult as both Octopress and Metalsmith work from a source directory and all my posts are already in a markdown format. I&rsquo;ve made a couple static websites using metalsmith, and have posted a <a href="https://github.com/MaciejKus/metalsmith-template">metalsmith skeleton</a> to github for myself and others to use when starting a metalsmith site/blog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[browser latency check]]></title>
    <link href="http://maciejkus.com/blog/2016/06/03/browser-latency-check/"/>
    <updated>2016-06-03T13:57:47-07:00</updated>
    <id>http://maciejkus.com/blog/2016/06/03/browser-latency-check</id>
    <content type="html"><![CDATA[<p>Modern browsers have a really cool feature called resource timing. See here:
<a href="https://www.w3.org/TR/resource-timing/">https://www.w3.org/TR/resource-timing/</a>
It allows a much more accurate way of measuring latency within the browser. Specifically, separates out things like DNS requests, cache replies, TCP header data etc. This means that a modern browser can be used to make a speed measurement in a very similar way that the PING command is used.</p>

<p>I created a little app which uses this resource timing to compare IPv4 and IPv6 latency directly within the browser. From my own testing the resulting times are very similar to ping times.</p>

<p>A browser is unable to directly access ICMP packets, so one cannot perform operations such as traceroute or ping directly from the browser, but now one can replicate ping to a very accurate level directly from the browser.</p>

<p>You can see this browser latency test at <a href="http://maciejkus.com/latency-v6-v4/">http://maciejkus.com/latency-v6-v4/</a></p>

<p>I also added a fallback test for older browsers. This is much less accurate and uses the loadtime of an image.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[online screen saver]]></title>
    <link href="http://maciejkus.com/blog/2016/05/09/online-screen-saver/"/>
    <updated>2016-05-09T16:17:10-07:00</updated>
    <id>http://maciejkus.com/blog/2016/05/09/online-screen-saver</id>
    <content type="html"><![CDATA[<p><a href='http://maciejkus.com/meditation/'>maciejkus.com/meditation</a></p>

<p>I had an idea for a relaxing browser based image display, something similar to the fireplace log you might find on TV during christmas. For those unfamiliar, every year around Christmas a television station would play hours and hours of a burning log in a fireplace. The idea was that those without a fireplace of their own could turn the TV to the log channel and have something similar in their home.</p>

<!--more-->


<p>Originally I was looking to use some kind of API to load a bunch of beautiful images and play some relaxing music. But Imgur and other picture hosting sites don’t really allow this. Which totally makes sense on their part, they are not a CDN.</p>

<p>So instead I took a few of the top images from Reddit’s EarthPorn, CityPorn and SpacePorn subreddits and just hosted them locally. I also took three songs from <a href="http://freemusicarchive.org/">http://freemusicarchive.org/</a> and also hosted them locally.</p>

<p>If this app were to ever really go live or become highly popular I would add a bunch more images and more music.</p>

<p>I’m happy with the result. The fade in and fade out when changing images is nice, the arrow on top of the menu bar is cool, the songs run on a loop. If I were to add more images and more music I would gladly leave this running in the background in my house.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[playing with react]]></title>
    <link href="http://maciejkus.com/blog/2016/04/09/playing-with-react/"/>
    <updated>2016-04-09T13:09:53-07:00</updated>
    <id>http://maciejkus.com/blog/2016/04/09/playing-with-react</id>
    <content type="html"><![CDATA[<p>Well, I have begun playing with React.js. For my first app I created a <a href='http://maciejkus.com/communist-lorem-ipsum/
'>lorem ipsum style generator</a>. Source is <a href='https://github.com/MaciejKus/Communist-Lorem-Ipsum'>here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[canvas-game]]></title>
    <link href="http://maciejkus.com/blog/2016/03/14/canvas-game/"/>
    <updated>2016-03-14T10:03:59-07:00</updated>
    <id>http://maciejkus.com/blog/2016/03/14/canvas-game</id>
    <content type="html"><![CDATA[<p>I wanted to try out Jasmine, which is a JavaScript unit testing library. I also had an idea for what could be a fun little <a href='http://maciejkus.com/canvas-game/'>game</a>, so I went ahead and made a html5/canvas game and used Jasmine to test things as I coded.</p>

<!-- more -->


<p>Though there are some plug-ins out there to make Jasmine work with canvas rendering, I skipped those, so I didn&rsquo;t truly test everything. But I did test all the non-drawing aspects of the game.</p>

<p>The game is simple enough that I don&rsquo;t think the unit testing helped too much, but if I were to expand the game it is useful to have the existing tests in place.</p>

<p>The tricky thing about this game was all the math. Do you remember those smart aleck kids in math class who would ask the teacher when they would ever use the math that they were learning? Well, at times I felt like my work on this game justified as an answer for all those teachers. This might have been the first time I ever had to find the intersection of two line segments outside of a school setting.</p>

<p>The game is all vanilla JavaScript using the HTML5 canvas object. Play it <a href='http://maciejkus.com/canvas-game/'>here</a>. The source code is on <a href='https://github.com/MaciejKus/canvas-fly-game'>github</a>. I am now familiar enough with Jasmine that I can and will use unit testing for future projects. Wins all around.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[design first]]></title>
    <link href="http://maciejkus.com/blog/2016/02/16/design-first/"/>
    <updated>2016-02-16T09:37:13-08:00</updated>
    <id>http://maciejkus.com/blog/2016/02/16/design-first</id>
    <content type="html"><![CDATA[<p>When making a game, or probably any program it is probably a better idea to design what you want to create before you actually begin to code.</p>

<!-- more -->


<p>I started working on a little RPG style game recently, but I started to code before I had a full idea of how the game will be played, what the goals of the game will be, etc. I figured that this would all come along as I coded. It&rsquo;s happened before with other things I wrote. But this time I just kept running into road blocks. I would either have too many ideas and now know how to implement them all to interact with one another or I just didn&rsquo;t know where to go from a certain idea and how that idea would further the gameplay.</p>

<p>It wasn&rsquo;t a coding issue. It was that I was trying to make something that I didn&rsquo;t have a clear concept of. I have heard that writers of novels will find that their characters end up doing things that the author never expected while writing the book. I had hopes that the game would do the same.</p>

<p>It did not.</p>

<p>I&rsquo;m putting the game &lsquo;on hold&rsquo; for now because I just cannot figure out what I want the actual gameplay to be like. But it was a valuable lesson. Have a design before actually starting to code. At least a rough one that can change along the way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roman numbers]]></title>
    <link href="http://maciejkus.com/blog/2016/02/12/roman-numbers/"/>
    <updated>2016-02-12T16:07:50-08:00</updated>
    <id>http://maciejkus.com/blog/2016/02/12/roman-numbers</id>
    <content type="html"><![CDATA[<p>A quick <a href='http://maciejkus.com/roman-numeral-calculator/'>Roman numeral converter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[using-d3-to-visualize-data]]></title>
    <link href="http://maciejkus.com/blog/2016/01/19/using-d3-to-visualize-data/"/>
    <updated>2016-01-19T14:10:57-08:00</updated>
    <id>http://maciejkus.com/blog/2016/01/19/using-d3-to-visualize-data</id>
    <content type="html"><![CDATA[<p>I started playing with d3.js, a visualization library. I got some data from the kickfurther website using a little python script I wrote. The script parsed out the relevant data and saved it as a JavaScript object.</p>

<p>From there I used <a href='http://chimera.labs.oreilly.com/books/1230000000345'>Interactive Data Visualization for the Web</a> as an intro to d3.js and built a fun little bubble graph. I don&rsquo;t know if a bubble graph is the most informative way to present this data, but it was the coolest looking, and mainly I was attempting to learn d3.js.</p>

<p>Check out my <a href='http://maciejkus.com/kickfurther-data/'>Kickfurther visualization</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[phaser addColor text]]></title>
    <link href="http://maciejkus.com/blog/2015/12/01/phaser-addcolor-text/"/>
    <updated>2015-12-01T12:19:00-08:00</updated>
    <id>http://maciejkus.com/blog/2015/12/01/phaser-addcolor-text</id>
    <content type="html"><![CDATA[<p>So I am making a text game in Phaserjs. Right now I am working on a simple way to move a cursor around a bunch of text. I have a background rectangle which is the same color as the text and the size of a single letter. This is similar to VIM or other text editors. However when moving to a new letter the letter itself have to change color to contrast the background. Again, exactly what VIM and other text editors do.</p>

<p>I currently do this using a simple function:</p>

<pre><code>colorLetter: function(letter, color) {
  this.text.addColor(color, letter);
  this.text.addColor('#0f0', letter+1);
}
</code></pre>

<p>where &lsquo;letter&rsquo; is the position of the letter. This colors that letter and all the other letters a color &lsquo;color&rsquo;, and then the next line colors all letters after &lsquo;letter&rsquo; back to green.</p>

<p>The problem is, this addColor() function takes forever and the code ends up being really laggy. I might look into doing things with retroFont, or I might have to change the color schemes so that the letters are different colors than the cursor rectangle. Hmmm&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript-closure-loop]]></title>
    <link href="http://maciejkus.com/blog/2015/11/23/javascript-closure-loop/"/>
    <updated>2015-11-23T09:30:33-08:00</updated>
    <id>http://maciejkus.com/blog/2015/11/23/javascript-closure-loop</id>
    <content type="html"><![CDATA[<p>Placing a closure inside a loop in JavaScript was a common source of headaches. The results were often unexpected. ECMAScript 2015 offers a new simple solution.</p>

<!-- more -->


<p>Using a codewars.com example as the basic idea, say you have a function which returns an array of functions, which return their index in the array.</p>

<pre><code>var callbacks = createFunctions(5); // create an array, containing 5 functions

callbacks[0](); // must return 0
callbacks[3](); // must return 3
</code></pre>

<p>Well, a closure is a solution that comes to mind, maybe something like this:</p>

<pre><code>function createFunctions(n) {
  var callbacks = [];

  for (var i=0; i&lt;n; i++) {
    callbacks.push(function() {
      return i;
    });
  }

  return callbacks;
}
</code></pre>

<p>But that doesn&rsquo;t work. Every callback will return &lsquo;n&rsquo;.</p>

<pre><code>var callbacks = createFunctions(5); // create an array, containing 5 functions

callbacks[0](); // returns 5
callbacks[3](); // returns 5
</code></pre>

<p>The reason is that the only thing happening inside the createFunctions function is that functions are being added to an array. They are not being executed until i=n. At that point each function sees that i is equal to n, and uses the last value of i.</p>

<p>One solution for this is to wrap things in a function that does execute every time the loop is run. Something like:</p>

<pre><code>function createFunctions(n) {
  var callbacks = [];

  for (var i=0; i&lt;n; i++) {
    (function(x) {callbacks.push(function() {
      return x;
    });
    }(i));
  }

  return callbacks;
}
</code></pre>

<p>Now every time the loop increments a function executes and the current value of i is passed into the function which is added to the array. Now you get the expected results.</p>

<p>ECMAScript 2015 (ES6) introduces a new &lsquo;let&rsquo; statement which is a block level scope! Previously all we had was &lsquo;var&rsquo; which was a function-wide scope. &lsquo;Let&rsquo; creates a variable within a block, for example an &lsquo;if&rsquo; or &lsquo;for&rsquo; block.</p>

<p>The new, ECMAScript 2015 solution to the above problem is a lot nicer looking:</p>

<pre><code>function createFunctions(n) {
  var callbacks = [];

  for (var i=0; i&lt;n; i++) {
    let x = i; //x has a scope only within the 'for' loop
     callbacks.push(function() {
      return x;
    });
  }

  return callbacks;
}
</code></pre>

<p>Pretty Exciting!</p>
]]></content>
  </entry>
  
</feed>
