<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Maciej Kus -- Bay Area JavaScript Developer]]></title>
  <link href="http://maciejkus.com/atom.xml" rel="self"/>
  <link href="http://maciejkus.com/"/>
  <updated>2016-07-05T15:15:31-07:00</updated>
  <id>http://maciejkus.com/</id>
  <author>
    <name><![CDATA[Maciej Kus]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[metalsmith-skeleton]]></title>
    <link href="http://maciejkus.com/blog/2016/07/05/metalsmith-skeleton/"/>
    <updated>2016-07-05T14:59:36-07:00</updated>
    <id>http://maciejkus.com/blog/2016/07/05/metalsmith-skeleton</id>
    <content type="html"><![CDATA[<p>When I was first making a blog/site I wanted a static site, so I could host it on github pages without needing a backend. Octobers seemed like the best choice at the time because it was quick and easy to setup. Octopress is based on Jekyll, which is probably the most popular static website generator. It also had a number of pre-made templates which meant saving time on writing my own CSS.</p>

<p>Basically, it was a quick and relatively easy way of getting a blog on maciejkus.com going. I now have plans to move the blog over to <a href="http://www.metalsmith.io/">metalsmith</a>. Metalsmith is written in JavaScript, and that alone is reason enough for me to switch over. I&rsquo;m much more comfortable in a JavaScript/Nodejs environment than a Ruby one. I also find metalsmith to be a lot more customizable, and at this point I am much more interested in writing my own CSS rather than using a premade template.</p>

<!-- more -->


<p>The move should not be very difficult as both Octopress and Metalsmith work from a source directory and all my posts are already in a markdown format. I&rsquo;ve made a couple static websites using metalsmith, and have posted a <a href="https://github.com/MaciejKus/metalsmith-template">metalsmith skeleton</a> to github for myself and others to use when starting a metalsmith site/blog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[browser latency check]]></title>
    <link href="http://maciejkus.com/blog/2016/06/03/browser-latency-check/"/>
    <updated>2016-06-03T13:57:47-07:00</updated>
    <id>http://maciejkus.com/blog/2016/06/03/browser-latency-check</id>
    <content type="html"><![CDATA[<p>Modern browsers have a really cool feature called resource timing. See here:
<a href="https://www.w3.org/TR/resource-timing/">https://www.w3.org/TR/resource-timing/</a>
It allows a much more accurate way of measuring latency within the browser. Specifically, separates out things like DNS requests, cache replies, TCP header data etc. This means that a modern browser can be used to make a speed measurement in a very similar way that the PING command is used.</p>

<p>I created a little app which uses this resource timing to compare IPv4 and IPv6 latency directly within the browser. From my own testing the resulting times are very similar to ping times.</p>

<p>A browser is unable to directly access ICMP packets, so one cannot perform operations such as traceroute or ping directly from the browser, but now one can replicate ping to a very accurate level directly from the browser.</p>

<p>You can see this browser latency test at <a href="http://maciejkus.com/latency-v6-v4/">http://maciejkus.com/latency-v6-v4/</a></p>

<p>I also added a fallback test for older browsers. This is much less accurate and uses the loadtime of an image.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[online screen saver]]></title>
    <link href="http://maciejkus.com/blog/2016/05/09/online-screen-saver/"/>
    <updated>2016-05-09T16:17:10-07:00</updated>
    <id>http://maciejkus.com/blog/2016/05/09/online-screen-saver</id>
    <content type="html"><![CDATA[<p><a href='http://maciejkus.com/meditation/'>maciejkus.com/meditation</a></p>

<p>I had an idea for a relaxing browser based image display, something similar to the fireplace log you might find on TV during christmas. For those unfamiliar, every year around Christmas a television station would play hours and hours of a burning log in a fireplace. The idea was that those without a fireplace of their own could turn the TV to the log channel and have something similar in their home.</p>

<!--more-->


<p>Originally I was looking to use some kind of API to load a bunch of beautiful images and play some relaxing music. But Imgur and other picture hosting sites don’t really allow this. Which totally makes sense on their part, they are not a CDN.</p>

<p>So instead I took a few of the top images from Reddit’s EarthPorn, CityPorn and SpacePorn subreddits and just hosted them locally. I also took three songs from <a href="http://freemusicarchive.org/">http://freemusicarchive.org/</a> and also hosted them locally.</p>

<p>If this app were to ever really go live or become highly popular I would add a bunch more images and more music.</p>

<p>I’m happy with the result. The fade in and fade out when changing images is nice, the arrow on top of the menu bar is cool, the songs run on a loop. If I were to add more images and more music I would gladly leave this running in the background in my house.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[playing with react]]></title>
    <link href="http://maciejkus.com/blog/2016/04/09/playing-with-react/"/>
    <updated>2016-04-09T13:09:53-07:00</updated>
    <id>http://maciejkus.com/blog/2016/04/09/playing-with-react</id>
    <content type="html"><![CDATA[<p>Well, I have begun playing with React.js. For my first app I created a <a href='http://maciejkus.com/communist-lorem-ipsum/
'>lorem ipsum style generator</a>. Source is <a href='https://github.com/MaciejKus/Communist-Lorem-Ipsum'>here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[canvas-game]]></title>
    <link href="http://maciejkus.com/blog/2016/03/14/canvas-game/"/>
    <updated>2016-03-14T10:03:59-07:00</updated>
    <id>http://maciejkus.com/blog/2016/03/14/canvas-game</id>
    <content type="html"><![CDATA[<p>I wanted to try out Jasmine, which is a JavaScript unit testing library. I also had an idea for what could be a fun little <a href='http://maciejkus.com/canvas-game/'>game</a>, so I went ahead and made a html5/canvas game and used Jasmine to test things as I coded.</p>

<!-- more -->


<p>Though there are some plug-ins out there to make Jasmine work with canvas rendering, I skipped those, so I didn&rsquo;t truly test everything. But I did test all the non-drawing aspects of the game.</p>

<p>The game is simple enough that I don&rsquo;t think the unit testing helped too much, but if I were to expand the game it is useful to have the existing tests in place.</p>

<p>The tricky thing about this game was all the math. Do you remember those smart aleck kids in math class who would ask the teacher when they would ever use the math that they were learning? Well, at times I felt like my work on this game justified as an answer for all those teachers. This might have been the first time I ever had to find the intersection of two line segments outside of a school setting.</p>

<p>The game is all vanilla JavaScript using the HTML5 canvas object. Play it <a href='http://maciejkus.com/canvas-game/'>here</a>. The source code is on <a href='https://github.com/MaciejKus/canvas-fly-game'>github</a>. I am now familiar enough with Jasmine that I can and will use unit testing for future projects. Wins all around.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[design first]]></title>
    <link href="http://maciejkus.com/blog/2016/02/16/design-first/"/>
    <updated>2016-02-16T09:37:13-08:00</updated>
    <id>http://maciejkus.com/blog/2016/02/16/design-first</id>
    <content type="html"><![CDATA[<p>When making a game, or probably any program it is probably a better idea to design what you want to create before you actually begin to code.</p>

<!-- more -->


<p>I started working on a little RPG style game recently, but I started to code before I had a full idea of how the game will be played, what the goals of the game will be, etc. I figured that this would all come along as I coded. It&rsquo;s happened before with other things I wrote. But this time I just kept running into road blocks. I would either have too many ideas and now know how to implement them all to interact with one another or I just didn&rsquo;t know where to go from a certain idea and how that idea would further the gameplay.</p>

<p>It wasn&rsquo;t a coding issue. It was that I was trying to make something that I didn&rsquo;t have a clear concept of. I have heard that writers of novels will find that their characters end up doing things that the author never expected while writing the book. I had hopes that the game would do the same.</p>

<p>It did not.</p>

<p>I&rsquo;m putting the game &lsquo;on hold&rsquo; for now because I just cannot figure out what I want the actual gameplay to be like. But it was a valuable lesson. Have a design before actually starting to code. At least a rough one that can change along the way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roman numbers]]></title>
    <link href="http://maciejkus.com/blog/2016/02/12/roman-numbers/"/>
    <updated>2016-02-12T16:07:50-08:00</updated>
    <id>http://maciejkus.com/blog/2016/02/12/roman-numbers</id>
    <content type="html"><![CDATA[<p>A quick <a href='http://maciejkus.com/roman-numeral-calculator/'>Roman numeral converter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[using-d3-to-visualize-data]]></title>
    <link href="http://maciejkus.com/blog/2016/01/19/using-d3-to-visualize-data/"/>
    <updated>2016-01-19T14:10:57-08:00</updated>
    <id>http://maciejkus.com/blog/2016/01/19/using-d3-to-visualize-data</id>
    <content type="html"><![CDATA[<p>I started playing with d3.js, a visualization library. I got some data from the kickfurther website using a little python script I wrote. The script parsed out the relevant data and saved it as a JavaScript object.</p>

<p>From there I used <a href='http://chimera.labs.oreilly.com/books/1230000000345'>Interactive Data Visualization for the Web</a> as an intro to d3.js and built a fun little bubble graph. I don&rsquo;t know if a bubble graph is the most informative way to present this data, but it was the coolest looking, and mainly I was attempting to learn d3.js.</p>

<p>Check out my <a href='http://maciejkus.com/kickfurther-data/'>Kickfurther visualization</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[phaser addColor text]]></title>
    <link href="http://maciejkus.com/blog/2015/12/01/phaser-addcolor-text/"/>
    <updated>2015-12-01T12:19:00-08:00</updated>
    <id>http://maciejkus.com/blog/2015/12/01/phaser-addcolor-text</id>
    <content type="html"><![CDATA[<p>So I am making a text game in Phaserjs. Right now I am working on a simple way to move a cursor around a bunch of text. I have a background rectangle which is the same color as the text and the size of a single letter. This is similar to VIM or other text editors. However when moving to a new letter the letter itself have to change color to contrast the background. Again, exactly what VIM and other text editors do.</p>

<p>I currently do this using a simple function:</p>

<pre><code>colorLetter: function(letter, color) {
  this.text.addColor(color, letter);
  this.text.addColor('#0f0', letter+1);
}
</code></pre>

<p>where &lsquo;letter&rsquo; is the position of the letter. This colors that letter and all the other letters a color &lsquo;color&rsquo;, and then the next line colors all letters after &lsquo;letter&rsquo; back to green.</p>

<p>The problem is, this addColor() function takes forever and the code ends up being really laggy. I might look into doing things with retroFont, or I might have to change the color schemes so that the letters are different colors than the cursor rectangle. Hmmm&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript-closure-loop]]></title>
    <link href="http://maciejkus.com/blog/2015/11/23/javascript-closure-loop/"/>
    <updated>2015-11-23T09:30:33-08:00</updated>
    <id>http://maciejkus.com/blog/2015/11/23/javascript-closure-loop</id>
    <content type="html"><![CDATA[<p>Placing a closure inside a loop in JavaScript was a common source of headaches. The results were often unexpected. ECMAScript 2015 offers a new simple solution.</p>

<!-- more -->


<p>Using a codewars.com example as the basic idea, say you have a function which returns an array of functions, which return their index in the array.</p>

<pre><code>var callbacks = createFunctions(5); // create an array, containing 5 functions

callbacks[0](); // must return 0
callbacks[3](); // must return 3
</code></pre>

<p>Well, a closure is a solution that comes to mind, maybe something like this:</p>

<pre><code>function createFunctions(n) {
  var callbacks = [];

  for (var i=0; i&lt;n; i++) {
    callbacks.push(function() {
      return i;
    });
  }

  return callbacks;
}
</code></pre>

<p>But that doesn&rsquo;t work. Every callback will return &lsquo;n&rsquo;.</p>

<pre><code>var callbacks = createFunctions(5); // create an array, containing 5 functions

callbacks[0](); // returns 5
callbacks[3](); // returns 5
</code></pre>

<p>The reason is that the only thing happening inside the createFunctions function is that functions are being added to an array. They are not being executed until i=n. At that point each function sees that i is equal to n, and uses the last value of i.</p>

<p>One solution for this is to wrap things in a function that does execute every time the loop is run. Something like:</p>

<pre><code>function createFunctions(n) {
  var callbacks = [];

  for (var i=0; i&lt;n; i++) {
    (function(x) {callbacks.push(function() {
      return x;
    });
    }(i));
  }

  return callbacks;
}
</code></pre>

<p>Now every time the loop increments a function executes and the current value of i is passed into the function which is added to the array. Now you get the expected results.</p>

<p>ECMAScript 2015 (ES6) introduces a new &lsquo;let&rsquo; statement which is a block level scope! Previously all we had was &lsquo;var&rsquo; which was a function-wide scope. &lsquo;Let&rsquo; creates a variable within a block, for example an &lsquo;if&rsquo; or &lsquo;for&rsquo; block.</p>

<p>The new, ECMAScript 2015 solution to the above problem is a lot nicer looking:</p>

<pre><code>function createFunctions(n) {
  var callbacks = [];

  for (var i=0; i&lt;n; i++) {
    let x = i; //x has a scope only within the 'for' loop
     callbacks.push(function() {
      return x;
    });
  }

  return callbacks;
}
</code></pre>

<p>Pretty Exciting!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Another Breakout Game]]></title>
    <link href="http://maciejkus.com/blog/2015/11/22/another-breakout/"/>
    <updated>2015-11-22T16:06:56-08:00</updated>
    <id>http://maciejkus.com/blog/2015/11/22/another-breakout</id>
    <content type="html"><![CDATA[<p>Welp, I made another breakout game. This time with Phaser.js. It was my first project with Phaser and was a nice introduction to the game engine.</p>

<p>Play <a href='http://maciejkus.com/border-breakout/'>Border Breakout</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pizza calculator]]></title>
    <link href="http://maciejkus.com/blog/2015/11/15/pizza-calculator/"/>
    <updated>2015-11-15T15:18:20-08:00</updated>
    <id>http://maciejkus.com/blog/2015/11/15/pizza-calculator</id>
    <content type="html"><![CDATA[<p>See input the diameter and cost of different pizza&rsquo;s and see which is the best deal. <a href='http://maciejkus.com/pizza_calc/'>Pizza calculator</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[which vps app]]></title>
    <link href="http://maciejkus.com/blog/2015/10/11/which-vps-app/"/>
    <updated>2015-10-11T16:29:28-07:00</updated>
    <id>http://maciejkus.com/blog/2015/10/11/which-vps-app</id>
    <content type="html"><![CDATA[<p>I made a list of the <a href='http://adminhacks.com/vps-compare.html'>best VPS hosting</a> providers and threw that information into an angular.js webapp. I used bootstrap for the style of the page.</p>

<p>As far as I can tell the VPS hosts in the app are the most dependable and most well known in the industry. I hope the app is useful to those looking to get a new virtual private server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Website]]></title>
    <link href="http://maciejkus.com/blog/2015/10/11/new-website/"/>
    <updated>2015-10-11T15:38:33-07:00</updated>
    <id>http://maciejkus.com/blog/2015/10/11/new-website</id>
    <content type="html"><![CDATA[<p>I made a new website. The idea is to create a <a href='http://adminhacks.com/'>IT technician information</a> website. Something for those looking to get into system administration or network administration, but not really knowing where to start. The idea is to write some posts and code some useful tools for those looking to get on the Internet, whether that be by running a web-server, or improving their home routing, or setting up an IPv6 tunnel.</p>

<!-- more -->


<p>The site is a static html site running off a very low power VPS. It can handle a decent amount of traffic, but if it ever got a reddit hug of death or got slashdotted, it would probably become unaccessible fairly quickly. Setting up nginx was about all that needed to be done on the server side to get the site up and running.</p>

<p>The content is largely created using <a href='http://www.metalsmith.io/'>metalsmith</a> which is JavaScript based static site generator (though it can be used for a lot more than that). I use handlebars.js templates and markdown to make my life a bit easier. The setup is very basic. My build.js file looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Metalsmith = require('metalsmith'),
</span><span class='line'>  templates = require('metalsmith-templates'),
</span><span class='line'>  collections = require('metalsmith-collections'),
</span><span class='line'>  markdown = require("metalsmith-markdown");
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Metalsmith(__dirname)
</span><span class='line'>    .use(collections({
</span><span class='line'>        articles: {
</span><span class='line'>          pattern:'*.md',
</span><span class='line'>          sortBy: 'date',
</span><span class='line'>          reverse: true
</span><span class='line'>       }
</span><span class='line'>     }))
</span><span class='line'>    .use(markdown())
</span><span class='line'>    .use(templates('handlebars'))
</span><span class='line'>    .destination('./build')
</span><span class='line'>    .build(function(err) {
</span><span class='line'>  if (err) console.log(err);
</span><span class='line'>  })</span></code></pre></td></tr></table></div></figure>


<p>Nothing too fancy. The collections() part allows me to create an array of all the markdown posts which I can then input into the handlebars.js templates to create an <a href='http://adminhacks.com/all-articles.html'>all posts</a> page.</p>

<p>There is a source/ directory, which the above build.js takes, runs the above functions on and spits out into a build/ directory.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jumpy jquery slide animation]]></title>
    <link href="http://maciejkus.com/blog/2015/10/11/jumpy-jquery-slide-animation/"/>
    <updated>2015-10-11T13:00:21-07:00</updated>
    <id>http://maciejkus.com/blog/2015/10/11/jumpy-jquery-slide-animation</id>
    <content type="html"><![CDATA[<p>CSS uses collapsing margins. What this means is that when two objects both have a margin value which overlaps, the margins are combines. So say you have two buttons, both of which have margin: 24px;.</p>

<p>Rather than creating a space of 48px between the two, CSS combines or collapses the margins into one value of 24px.</p>

<p>This is fine most of the time, but is a long known issue with jQuery animations. Here&rsquo;s a 5 year old post describing it:
<a href="http://bugs.jquery.com/ticket/7442">http://bugs.jquery.com/ticket/7442</a></p>

<p>Basically jQuery animations become jumpy when margins are combined. I haven&rsquo;t looked too in-depth into the jQuery code to see exactly how animations like .slide() work, but the collapsing margins are the reason for the jumpiness.</p>

<p>The solution is simply to remove any overlapping margins in the element which is being animated, along with any bordering elements. Istead of having two buttons both of which have a margin value of 24px (but combined CSS still only created a 24px margin between the two) have one of the buttons have a 0px margin and the other a 24px margin. The space between them will still be the same, and now jQuery animations looks smooth.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JS object inherit]]></title>
    <link href="http://maciejkus.com/blog/2015/10/05/js-object-inherit/"/>
    <updated>2015-10-05T16:43:56-07:00</updated>
    <id>http://maciejkus.com/blog/2015/10/05/js-object-inherit</id>
    <content type="html"><![CDATA[<p>As found here: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript</a></p>

<p>Proper JavaScript inheritance looks like this:</p>

<p>//Inherit from Tower  prototype</p>

<p><code>
var Tower2 = function(x,y,z) {
  Tower.call(this,x,y);
  this.z = z; //not from Tower
}
Tower2.prototype = Object.create(Tower.prototype);
Tower2.prototype.constructor = Tower2;
</code></p>

<p>Mainly this post is a reminder for myself so I don&rsquo;t have to search to see if I got everything correct.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Canvas Match 3 Game]]></title>
    <link href="http://maciejkus.com/blog/2015/09/29/canvas-match-3-game/"/>
    <updated>2015-09-29T09:39:45-07:00</updated>
    <id>http://maciejkus.com/blog/2015/09/29/canvas-match-3-game</id>
    <content type="html"><![CDATA[<p>I decided to make a match three game as a first step to learning a new game engine. Since Enchant.js is pretty much abandoned at this point, I figured it was time to try something new, and I decided on Phaser.js. So I start making the game, but it just seems that using a game engine was overkill for something as simple as a match-three game.</p>

<p>So I decided to save learning Phaser.js for a different project and just make the match-three game using plain old vanilla JavaScript and the html5 canvas element. Play it <a href='http://brogress.smoothiegains.com/smoothie_match/'>here</a>.</p>

<!-- more -->


<p>The coolest thing about making the game was dealing with all the animations. I split up the animations to only render the tile which is moving, instead of rendering the whole canvas every time something has to be changed. This saves a lot of resources, making the game run faster and smoother. The trick was to make sure that things didn&rsquo;t overlap.  The animations run asynchronously, so I had to avoid situations where multiple animations were running on top of one another, or that the logic from a running animation did not interfere with the logic of a new mouse click.</p>

<p>The game is pretty basic, but I was able to remove all the little glitches I came across when testing. I&rsquo;m also pleased to have made a game where the graphics actually look OK. This is all thanks to finding creative commons images and playing with GIMP a little bit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Searchable-Reddit-Brogress]]></title>
    <link href="http://maciejkus.com/blog/2015/09/06/searchable-reddit-brogress/"/>
    <updated>2015-09-06T11:16:17-07:00</updated>
    <id>http://maciejkus.com/blog/2015/09/06/searchable-reddit-brogress</id>
    <content type="html"><![CDATA[<p>Reddit has a number of fitness progress picture communities. The problem is there is no good way to search through the posts. A lot of the posts are either people trying to lose weight, or 16 year olds who gain 30 pounds of muscle in 3 months. I am not interested in losing weight, nor do I have the raging growth hormones of a teenager.</p>

<p>I wanted to be able to search through the posts to find photos of people similar to me in height and weight so I could have a realistic fitness goal to strive for when I go to the gym. So, using angularJS I made my own.</p>

<p>I present the world with a <a href='http://brogress.smoothiegains.com/'>searchable fitness photo</a> web app.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wage-calc]]></title>
    <link href="http://maciejkus.com/blog/2015/09/05/wage-calc/"/>
    <updated>2015-09-05T17:18:07-07:00</updated>
    <id>http://maciejkus.com/blog/2015/09/05/wage-calc</id>
    <content type="html"><![CDATA[<p>A <a href='http://maciejkus.com/wage-calculator/'>wage calculator</a> which calculates inflation, top CEO compensation, S&amp;P 500, and San Francisco real estate growth. See if r is greater than g in the short term.</p>

<p>The chart was made using chart.js</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[memoization]]></title>
    <link href="http://maciejkus.com/blog/2015/08/21/memoization/"/>
    <updated>2015-08-21T13:59:37-07:00</updated>
    <id>http://maciejkus.com/blog/2015/08/21/memoization</id>
    <content type="html"><![CDATA[<p>It&rsquo;s pretty amazing how much faster caching makes code. I was doing a CodeWars exercise trying to go through an array and find the first (left most) pair of numbers which add up to a given sum (<code>s</code>). I first tried:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var pairs=function(ints, s){
</span><span class='line'>  for(var i = 1, j= ints.length; i &lt; j; i++) {
</span><span class='line'>    for (var x = 0; x &lt; i; x++) {
</span><span class='line'>      if(ints[i] + ints[x] === s) return [ints[x],ints[i]];
</span><span class='line'>    }
</span><span class='line'>  }   
</span><span class='line'>  return undefined;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Pretty self explanatory, it goes through the array and for every number goes through all the numbers before that one to see if they add up to the sum. It works, but was too slow and timed out when the array was huge.</p>

<p>I tried to speed things up a bit by using indexOf() rather than a second for loop, but that actually slowed things down, as indexOf() is like a loop, but with a bunch of checks included in it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var pairs=function(ints, s){
</span><span class='line'>  for(var i = 1, j= ints.length; i &lt; j; i++) {
</span><span class='line'>    var otherIndex = ints.indexOf(s - ints[i])
</span><span class='line'>    if(otherIndex &gt; -1 && otherIndex &lt; i) return [(s - ints[i]),ints[i]];
</span><span class='line'>  }   
</span><span class='line'>  return undefined;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>I then thought about caching or memoization, and that is where the solution lay. Basically, the trick is to create a JavaScript object which holds all the values which have already been seen in the <code>ints</code> array.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var pairs=function(ints, s){
</span><span class='line'>//variable to hold numbers already checked
</span><span class='line'>var cached = {};
</span><span class='line'>  for(var i = 0, j= ints.length; i &lt; j; i++) {
</span><span class='line'>    var num = ints[i];
</span><span class='line'>    //the value needed to form a pair
</span><span class='line'>    var num2 = s - num;
</span><span class='line'>    //if have seen num2 already 
</span><span class='line'>    //then this is the answer
</span><span class='line'>    if(num2 in cached) {
</span><span class='line'>      return [num2,num];
</span><span class='line'>    //add num2 to cache
</span><span class='line'>    } else {
</span><span class='line'>      cached[num] = 1;
</span><span class='line'>    }
</span><span class='line'>  }   
</span><span class='line'>  //no pair found
</span><span class='line'>  return undefined;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
