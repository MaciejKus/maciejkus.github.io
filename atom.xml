<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Maciej Kus is not a Figure Skater]]></title>
  <link href="http://maciejkus.com/atom.xml" rel="self"/>
  <link href="http://maciejkus.com/"/>
  <updated>2016-01-01T12:02:14-08:00</updated>
  <id>http://maciejkus.com/</id>
  <author>
    <name><![CDATA[Maciej Kus]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[phaser addColor text]]></title>
    <link href="http://maciejkus.com/blog/2015/12/01/phaser-addcolor-text/"/>
    <updated>2015-12-01T12:19:00-08:00</updated>
    <id>http://maciejkus.com/blog/2015/12/01/phaser-addcolor-text</id>
    <content type="html"><![CDATA[<p>So I am making a text game in Phaserjs. Right now I am working on a simple way to move a cursor around a bunch of text. I have a background rectangle which is the same color as the text and the size of a single letter. This is similar to VIM or other text editors. However when moving to a new letter the letter itself have to change color to contrast the background. Again, exactly what VIM and other text editors do.</p>

<p>I currently do this using a simple function:</p>

<pre><code>colorLetter: function(letter, color) {
  this.text.addColor(color, letter);
  this.text.addColor('#0f0', letter+1);
}
</code></pre>

<p>where &lsquo;letter&rsquo; is the position of the letter. This colors that letter and all the other letters a color &lsquo;color&rsquo;, and then the next line colors all letters after &lsquo;letter&rsquo; back to green.</p>

<p>The problem is, this addColor() function takes forever and the code ends up being really laggy. I might look into doing things with retroFont, or I might have to change the color schemes so that the letters are different colors than the cursor rectangle. Hmmm&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript-closure-loop]]></title>
    <link href="http://maciejkus.com/blog/2015/11/23/javascript-closure-loop/"/>
    <updated>2015-11-23T09:30:33-08:00</updated>
    <id>http://maciejkus.com/blog/2015/11/23/javascript-closure-loop</id>
    <content type="html"><![CDATA[<p>Placing a closure inside a loop in JavaScript was a common source of headaches. The results were often unexpected. ECMAScript 2015 offers a new simple solution.</p>

<!-- more -->


<p>Using a codewars.com example as the basic idea, say you have a function which returns an array of functions, which return their index in the array.</p>

<pre><code>var callbacks = createFunctions(5); // create an array, containing 5 functions

callbacks[0](); // must return 0
callbacks[3](); // must return 3
</code></pre>

<p>Well, a closure is a solution that comes to mind, maybe something like this:</p>

<pre><code>function createFunctions(n) {
  var callbacks = [];

  for (var i=0; i&lt;n; i++) {
    callbacks.push(function() {
      return i;
    });
  }

  return callbacks;
}
</code></pre>

<p>But that doesn&rsquo;t work. Every callback will return &lsquo;n&rsquo;.</p>

<pre><code>var callbacks = createFunctions(5); // create an array, containing 5 functions

callbacks[0](); // returns 5
callbacks[3](); // returns 5
</code></pre>

<p>The reason is that the only thing happening inside the createFunctions function is that functions are being added to an array. They are not being executed until i=n. At that point each function sees that i is equal to n, and uses the last value of i.</p>

<p>One solution for this is to wrap things in a function that does execute every time the loop is run. Something like:</p>

<pre><code>function createFunctions(n) {
  var callbacks = [];

  for (var i=0; i&lt;n; i++) {
    (function(x) {callbacks.push(function() {
      return x;
    });
    }(i));
  }

  return callbacks;
}
</code></pre>

<p>Now every time the loop increments a function executes and the current value of i is passed into the function which is added to the array. Now you get the expected results.</p>

<p>ECMAScript 2015 (ES6) introduces a new &lsquo;let&rsquo; statement which is a block level scope! Previously all we had was &lsquo;var&rsquo; which was a function-wide scope. &lsquo;Let&rsquo; creates a variable within a block, for example an &lsquo;if&rsquo; or &lsquo;for&rsquo; block.</p>

<p>The new, ECMAScript 2015 solution to the above problem is a lot nicer looking:</p>

<pre><code>function createFunctions(n) {
  var callbacks = [];

  for (var i=0; i&lt;n; i++) {
    let x = i; //x has a scope only within the 'for' loop
     callbacks.push(function() {
      return x;
    });
  }

  return callbacks;
}
</code></pre>

<p>Pretty Exciting!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Another Breakout Game]]></title>
    <link href="http://maciejkus.com/blog/2015/11/22/another-breakout/"/>
    <updated>2015-11-22T16:06:56-08:00</updated>
    <id>http://maciejkus.com/blog/2015/11/22/another-breakout</id>
    <content type="html"><![CDATA[<p>Welp, I made another breakout game. This time with Phaser.js. It was my first project with Phaser and was a nice introduction to the game engine.</p>

<p>Play <a href='http://maciejkus.com/border-breakout/'>Border Breakout</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pizza calculator]]></title>
    <link href="http://maciejkus.com/blog/2015/11/15/pizza-calculator/"/>
    <updated>2015-11-15T15:18:20-08:00</updated>
    <id>http://maciejkus.com/blog/2015/11/15/pizza-calculator</id>
    <content type="html"><![CDATA[<p>See input the diameter and cost of different pizza&rsquo;s and see which is the best deal. <a href='http://maciejkus.com/pizza_calc/'>Pizza calculator</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[which vps app]]></title>
    <link href="http://maciejkus.com/blog/2015/10/11/which-vps-app/"/>
    <updated>2015-10-11T16:29:28-07:00</updated>
    <id>http://maciejkus.com/blog/2015/10/11/which-vps-app</id>
    <content type="html"><![CDATA[<p>I made a list of the <a href='http://adminhacks.com/vps-compare.html'>best VPS hosting</a> providers and threw that information into an angular.js webapp. I used bootstrap for the style of the page.</p>

<p>As far as I can tell the VPS hosts in the app are the most dependable and most well known in the industry. I hope the app is useful to those looking to get a new virtual private server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Website]]></title>
    <link href="http://maciejkus.com/blog/2015/10/11/new-website/"/>
    <updated>2015-10-11T15:38:33-07:00</updated>
    <id>http://maciejkus.com/blog/2015/10/11/new-website</id>
    <content type="html"><![CDATA[<p>I made a new website. The idea is to create a <a href='http://adminhacks.com/'>IT technician information</a> website. Something for those looking to get into system administration or network administration, but not really knowing where to start. The idea is to write some posts and code some useful tools for those looking to get on the Internet, whether that be by running a web-server, or improving their home routing, or setting up an IPv6 tunnel.</p>

<!-- more -->


<p>The site is a static html site running off a very low power VPS. It can handle a decent amount of traffic, but if it ever got a reddit hug of death or got slashdotted, it would probably become unaccessible fairly quickly. Setting up nginx was about all that needed to be done on the server side to get the site up and running.</p>

<p>The content is largely created using <a href='http://www.metalsmith.io/'>metalsmith</a> which is JavaScript based static site generator (though it can be used for a lot more than that). I use handlebars.js templates and markdown to make my life a bit easier. The setup is very basic. My build.js file looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Metalsmith = require('metalsmith'),
</span><span class='line'>  templates = require('metalsmith-templates'),
</span><span class='line'>  collections = require('metalsmith-collections'),
</span><span class='line'>  markdown = require("metalsmith-markdown");
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Metalsmith(__dirname)
</span><span class='line'>    .use(collections({
</span><span class='line'>        articles: {
</span><span class='line'>          pattern:'*.md',
</span><span class='line'>          sortBy: 'date',
</span><span class='line'>          reverse: true
</span><span class='line'>       }
</span><span class='line'>     }))
</span><span class='line'>    .use(markdown())
</span><span class='line'>    .use(templates('handlebars'))
</span><span class='line'>    .destination('./build')
</span><span class='line'>    .build(function(err) {
</span><span class='line'>  if (err) console.log(err);
</span><span class='line'>  })</span></code></pre></td></tr></table></div></figure>


<p>Nothing too fancy. The collections() part allows me to create an array of all the markdown posts which I can then input into the handlebars.js templates to create an <a href='http://adminhacks.com/all-articles.html'>all posts</a> page.</p>

<p>There is a source/ directory, which the above build.js takes, runs the above functions on and spits out into a build/ directory.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jumpy jquery slide animation]]></title>
    <link href="http://maciejkus.com/blog/2015/10/11/jumpy-jquery-slide-animation/"/>
    <updated>2015-10-11T13:00:21-07:00</updated>
    <id>http://maciejkus.com/blog/2015/10/11/jumpy-jquery-slide-animation</id>
    <content type="html"><![CDATA[<p>CSS uses collapsing margins. What this means is that when two objects both have a margin value which overlaps, the margins are combines. So say you have two buttons, both of which have margin: 24px;.</p>

<p>Rather than creating a space of 48px between the two, CSS combines or collapses the margins into one value of 24px.</p>

<p>This is fine most of the time, but is a long known issue with jQuery animations. Here&rsquo;s a 5 year old post describing it:
<a href="http://bugs.jquery.com/ticket/7442">http://bugs.jquery.com/ticket/7442</a></p>

<p>Basically jQuery animations become jumpy when margins are combined. I haven&rsquo;t looked too in-depth into the jQuery code to see exactly how animations like .slide() work, but the collapsing margins are the reason for the jumpiness.</p>

<p>The solution is simply to remove any overlapping margins in the element which is being animated, along with any bordering elements. Istead of having two buttons both of which have a margin value of 24px (but combined CSS still only created a 24px margin between the two) have one of the buttons have a 0px margin and the other a 24px margin. The space between them will still be the same, and now jQuery animations looks smooth.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JS object inherit]]></title>
    <link href="http://maciejkus.com/blog/2015/10/05/js-object-inherit/"/>
    <updated>2015-10-05T16:43:56-07:00</updated>
    <id>http://maciejkus.com/blog/2015/10/05/js-object-inherit</id>
    <content type="html"><![CDATA[<p>As found here: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript</a></p>

<p>Proper JavaScript inheritance looks like this:</p>

<p>//Inherit from Tower  prototype</p>

<p><code>
var Tower2 = function(x,y,z) {
  Tower.call(this,x,y);
  this.z = z; //not from Tower
}
Tower2.prototype = Object.create(Tower.prototype);
Tower2.prototype.constructor = Tower2;
</code></p>

<p>Mainly this post is a reminder for myself so I don&rsquo;t have to search to see if I got everything correct.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Canvas Match 3 Game]]></title>
    <link href="http://maciejkus.com/blog/2015/09/29/canvas-match-3-game/"/>
    <updated>2015-09-29T09:39:45-07:00</updated>
    <id>http://maciejkus.com/blog/2015/09/29/canvas-match-3-game</id>
    <content type="html"><![CDATA[<p>I decided to make a match three game as a first step to learning a new game engine. Since Enchant.js is pretty much abandoned at this point, I figured it was time to try something new, and I decided on Phaser.js. So I start making the game, but it just seems that using a game engine was overkill for something as simple as a match-three game.</p>

<p>So I decided to save learning Phaser.js for a different project and just make the match-three game using plain old vanilla JavaScript and the html5 canvas element. Play it <a href='http://brogress.smoothiegains.com/smoothie_match/'>here</a>.</p>

<!-- more -->


<p>The coolest thing about making the game was dealing with all the animations. I split up the animations to only render the tile which is moving, instead of rendering the whole canvas every time something has to be changed. This saves a lot of resources, making the game run faster and smoother. The trick was to make sure that things didn&rsquo;t overlap.  The animations run asynchronously, so I had to avoid situations where multiple animations were running on top of one another, or that the logic from a running animation did not interfere with the logic of a new mouse click.</p>

<p>The game is pretty basic, but I was able to remove all the little glitches I came across when testing. I&rsquo;m also pleased to have made a game where the graphics actually look OK. This is all thanks to finding creative commons images and playing with GIMP a little bit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Searchable-Reddit-Brogress]]></title>
    <link href="http://maciejkus.com/blog/2015/09/06/searchable-reddit-brogress/"/>
    <updated>2015-09-06T11:16:17-07:00</updated>
    <id>http://maciejkus.com/blog/2015/09/06/searchable-reddit-brogress</id>
    <content type="html"><![CDATA[<p>Reddit has a number of fitness progress picture communities. The problem is there is no good way to search through the posts. A lot of the posts are either people trying to lose weight, or 16 year olds who gain 30 pounds of muscle in 3 months. I am not interested in losing weight, nor do I have the raging growth hormones of a teenager.</p>

<p>I wanted to be able to search through the posts to find photos of people similar to me in height and weight so I could have a realistic fitness goal to strive for when I go to the gym. So, using angularJS I made my own.</p>

<p>I present the world with a <a href='http://brogress.smoothiegains.com/'>searchable fitness photo</a> web app.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wage-calc]]></title>
    <link href="http://maciejkus.com/blog/2015/09/05/wage-calc/"/>
    <updated>2015-09-05T17:18:07-07:00</updated>
    <id>http://maciejkus.com/blog/2015/09/05/wage-calc</id>
    <content type="html"><![CDATA[<p>A <a href='http://maciejkus.com/wage-calculator/'>wage calculator</a> which calculates inflation, top CEO compensation, S&amp;P 500, and San Francisco real estate growth. See if r is greater than g in the short term.</p>

<p>The chart was made using chart.js</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[memoization]]></title>
    <link href="http://maciejkus.com/blog/2015/08/21/memoization/"/>
    <updated>2015-08-21T13:59:37-07:00</updated>
    <id>http://maciejkus.com/blog/2015/08/21/memoization</id>
    <content type="html"><![CDATA[<p>It&rsquo;s pretty amazing how much faster caching makes code. I was doing a CodeWars exercise trying to go through an array and find the first (left most) pair of numbers which add up to a given sum (<code>s</code>). I first tried:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var pairs=function(ints, s){
</span><span class='line'>  for(var i = 1, j= ints.length; i &lt; j; i++) {
</span><span class='line'>    for (var x = 0; x &lt; i; x++) {
</span><span class='line'>      if(ints[i] + ints[x] === s) return [ints[x],ints[i]];
</span><span class='line'>    }
</span><span class='line'>  }   
</span><span class='line'>  return undefined;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Pretty self explanatory, it goes through the array and for every number goes through all the numbers before that one to see if they add up to the sum. It works, but was too slow and timed out when the array was huge.</p>

<p>I tried to speed things up a bit by using indexOf() rather than a second for loop, but that actually slowed things down, as indexOf() is like a loop, but with a bunch of checks included in it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var pairs=function(ints, s){
</span><span class='line'>  for(var i = 1, j= ints.length; i &lt; j; i++) {
</span><span class='line'>    var otherIndex = ints.indexOf(s - ints[i])
</span><span class='line'>    if(otherIndex &gt; -1 && otherIndex &lt; i) return [(s - ints[i]),ints[i]];
</span><span class='line'>  }   
</span><span class='line'>  return undefined;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>I then thought about caching or memoization, and that is where the solution lay. Basically, the trick is to create a JavaScript object which holds all the values which have already been seen in the <code>ints</code> array.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var pairs=function(ints, s){
</span><span class='line'>//variable to hold numbers already checked
</span><span class='line'>var cached = {};
</span><span class='line'>  for(var i = 0, j= ints.length; i &lt; j; i++) {
</span><span class='line'>    var num = ints[i];
</span><span class='line'>    //the value needed to form a pair
</span><span class='line'>    var num2 = s - num;
</span><span class='line'>    //if have seen num2 already 
</span><span class='line'>    //then this is the answer
</span><span class='line'>    if(num2 in cached) {
</span><span class='line'>      return [num2,num];
</span><span class='line'>    //add num2 to cache
</span><span class='line'>    } else {
</span><span class='line'>      cached[num] = 1;
</span><span class='line'>    }
</span><span class='line'>  }   
</span><span class='line'>  //no pair found
</span><span class='line'>  return undefined;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tdee-calculator]]></title>
    <link href="http://maciejkus.com/blog/2015/08/16/tdee-calculator/"/>
    <updated>2015-08-16T16:43:58-07:00</updated>
    <id>http://maciejkus.com/blog/2015/08/16/tdee-calculator</id>
    <content type="html"><![CDATA[<p>A <a href="http://smoothiegains.com/tdee-and-bmr-calculator/">TDEE and BMR calculator</a> helps measure how many calories are needed to gain or lose weight. The inputs include exercise levels, age and body description.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsbreakouts]]></title>
    <link href="http://maciejkus.com/blog/2015/08/11/jsbreakouts/"/>
    <updated>2015-08-11T09:12:00-07:00</updated>
    <id>http://maciejkus.com/blog/2015/08/11/jsbreakouts</id>
    <content type="html"><![CDATA[<p>There&rsquo;s a project, JavaScript <a href="http://www.jsbreakouts.org/">Breakouts</a> which is a collection of different JavaScript game engines. All the game engines are used to create the same version of Breakout, with the same features, etc. It&rsquo;s a way to allow people to compare different game engines by looking at them in action.</p>

<p>Since I&rsquo;ve used enchant.js before, I figured I would add an enchant.js version to the Breakouts. The game can be played <a href="http://www.jsbreakouts.org/enchantjs/index.html">here</a>. Coding this game I realized that enchant.js is out of date. The last time it has been updated was around 2013. There was one <a href="https://github.com/wise9/enchant.js/issues/312">issue</a> where I actually had to go in and change the code for enchant.js to make the game work. There is an outdated web audio line:</p>

<p><code>this.src.disconnect(this.connectTarget);</code></p>

<p>This caused Chrome and other webkit based browsers to issue a</p>

<p><code>Uncaught InvalidAccessError: Failed to execute 'disconnect' on 'AudioNode': the given destination is not connected.</code></p>

<p>error. This was fixed by changing the above line to</p>

<p><code>this.src.disconnect();</code></p>

<p>Before this change, the game would crash as soon as a sound was played. I see there are other issues with enchant.js. On older versions of Firefox the game does not finish loading. Instead it throws a</p>

<p><code>Error: failed in Deferred</code></p>

<p>error. It&rsquo;s unfortunate, but it seems like enchant.js is no longer being maintained, and so I will have to find a new game engine to use, if I ever decide to use a game engine for a game.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Canvas Breakout]]></title>
    <link href="http://maciejkus.com/blog/2015/08/04/canvas-breakout/"/>
    <updated>2015-08-04T09:24:11-07:00</updated>
    <id>http://maciejkus.com/blog/2015/08/04/canvas-breakout</id>
    <content type="html"><![CDATA[<p>Continuing with the Canvas/JavaScript game theme that I&rsquo;ve been on recently, I just coded a game of <a href="http://maciejkus.com/breakout/">Breakout</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Canvas/HTML5 Tower Defense]]></title>
    <link href="http://maciejkus.com/blog/2015/07/06/canvas-tower-defense/"/>
    <updated>2015-07-06T17:30:41-07:00</updated>
    <id>http://maciejkus.com/blog/2015/07/06/canvas-tower-defense</id>
    <content type="html"><![CDATA[<p>I made a fairly simply tower defense game in html5/canvas/javascript. It works fine as is. Most of the features I would want to create are there, the game just needs some work on the actual game play. Details like the cost of towers, and how rapid the attackers are spawned will probably need to be changed to make the game more enjoyable. The current version works well enough to play.</p>

<p>Check it out at <a href="http://maciejkus.com/tower/">http://maciejkus.com/tower/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[snake]]></title>
    <link href="http://maciejkus.com/blog/2015/06/26/snake/"/>
    <updated>2015-06-26T15:20:57-07:00</updated>
    <id>http://maciejkus.com/blog/2015/06/26/snake</id>
    <content type="html"><![CDATA[<p>Snake, the classic game, now in html5/Canvas: <a href="http://maciejkus.com/snake/">http://maciejkus.com/snake/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[unit-vector-eyes-follow-mouse]]></title>
    <link href="http://maciejkus.com/blog/2015/06/23/unit-vector-eyes-follow-mouse/"/>
    <updated>2015-06-23T17:11:11-07:00</updated>
    <id>http://maciejkus.com/blog/2015/06/23/unit-vector-eyes-follow-mouse</id>
    <content type="html"><![CDATA[<p>A unit vector or normal vector is useful for pointing things at other things. Like pointing eyes at a mouse. See here what a unit vector is:
<a href="https://en.wikipedia.org/wiki/Unit_vector">https://en.wikipedia.org/wiki/Unit_vector</a></p>

<p>and then check out <a href="http://maciejkus.com/unit-vector-eyes/">http://maciejkus.com/unit-vector-eyes/</a> to see some html5/canvas eyes which follow your mouse cursor. They currently only follow the mouse when it is inside the canvas element, but this can easily be changed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[angular_forum]]></title>
    <link href="http://maciejkus.com/blog/2015/06/22/angular-forum/"/>
    <updated>2015-06-22T14:46:04-07:00</updated>
    <id>http://maciejkus.com/blog/2015/06/22/angular-forum</id>
    <content type="html"><![CDATA[<p>Welp, I made a simple forum using angularJS. This is a lot more of what angular was meant to do than that baseball game I made a bit ago. It&rsquo;s a simple single page app. I did not create any backend functionality to save the posts or anything like that, partly because it is just an exercise, and partly because github   pages do not have backend access.</p>

<!--more-->


<p>You can see it at <a href="http://maciejkus.com/angular-forum/">http://maciejkus.com/angular-forum/</a>
You can make new posts, you can click on a username to see post titles made by that user. Nothing too fancy but it covers a lot of angular ideas.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[box_whiskers_calc]]></title>
    <link href="http://maciejkus.com/blog/2015/06/20/box-whiskers-calc/"/>
    <updated>2015-06-20T12:30:32-07:00</updated>
    <id>http://maciejkus.com/blog/2015/06/20/box-whiskers-calc</id>
    <content type="html"><![CDATA[<p> There is a shocking lack of box and whisker graph calculators on the Internet. Well, accurate ones anyway, so I made one. Originally I needed one for some calculations I was doing and made one in Python, but then I figured I can easily rewrite it into Javascript and make it available for others. I even added a simple HTML5 canvas graph. You can find it at <a href="http://maciejkus.com/box_whiskers/">Box and Whiskers Calculator</a></p>
]]></content>
  </entry>
  
</feed>
